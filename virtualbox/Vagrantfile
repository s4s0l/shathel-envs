# -*- mode: ruby -*-
# vi: set ft=ruby :

Managers = ENV['SHATHEL_ENV_MANAGERS'].to_i
Workers = ENV['SHATHEL_ENV_WORKERS'].to_i
Solution = ENV['SHATHEL_ENV_SOLUTION_NAME']
Ansible = ENV['SHATHEL_ENVPACKAGE_ANSIBLE_INVENTORY']
KeysLocation = ENV['SHATHEL_ENVPACKAGE_KEY_DIR']
PackageName = ENV['SHATHEL_ENVPACKAGE_IMAGE_NAME']

PrivateNetwork = ENV['SHATHEL_ENV_PRIVATE_NET'] == nil ? "42.42.42" : ENV['SHATHEL_ENV_PRIVATE_NET']
PublicNetwork = ENV['SHATHEL_ENV_PUBLIC_NET'] == nil ? "192.168.99" : ENV['SHATHEL_ENV_PUBLIC_NET']






if File.exist?(Ansible)
  File.delete(Ansible)
end
AnsibleFile = File.open(Ansible, 'a')




Vagrant.configure("2") do |config|
  config.vm.box = "#{PackageName}"
  config.ssh.username = "vagrant"
  config.ssh.insert_key = false
  config.vm.box_check_update = true
  config.vm.synced_folder '.', '/vagrant', disabled: true
  #shell command: todo - add to groovy : vagrant plugin install vagrant-disksize
  config.disksize.size = '50GB'

  AnsibleFile.puts "[shathel_manager_hosts]"
  (1..Managers).each { |i|
    ip_num = "#{PublicNetwork}.#{i+1}"
    ip_num2 = "#{PrivateNetwork}.#{i+1}"
    m_name = "#{Solution}-manager-#{i}"
    AnsibleFile.puts "#{ip_num} private_ip=#{ip_num2} public_ip=#{ip_num} shathel_name=#{m_name} shathel_role=manager"
    config.vm.define m_name do |manager|
      manager.vm.network "private_network", ip: ip_num
      manager.vm.network "private_network", ip: ip_num2
      manager.vm.provider "virtualbox" do |v|
        v.name = m_name
      end
    end
  }
  AnsibleFile.puts "[shathel_worker_hosts]"
  (1..Workers).each { |i|
    ip_num = "#{PublicNetwork}.#{i+1 + Managers}"
    ip_num2 = "#{PrivateNetwork}.#{i+1+ Managers}"
    m_name = "#{Solution}-worker-#{i}"
    AnsibleFile.puts "#{ip_num} private_ip=#{ip_num2} public_ip=#{ip_num} shathel_name=#{m_name} shathel_role=worker"
    config.vm.define m_name do |manager|
      manager.vm.network "private_network", ip: ip_num
      manager.vm.network "private_network", ip: ip_num2
      manager.vm.provider "virtualbox" do |v|
        v.name = m_name
      end
    end
  }


  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = "1024"
    vb.cpus = 1
    vb.customize ["storagectl", :id,  "--name", "SCSI", "--hostiocache", "on"]
    vb.customize ["modifyvm", :id,  "--uartmode1", "disconnected", "--biosbootmenu", "disabled", "--boot1", "disk", "--boot2", "none", "--boot3", "none", "--boot4", "none"]
    vb.customize ["storageattach", :id,  "--storagectl", "SCSI", "--port", "0", "--nonrotational" ,"on"]
    vb.customize ["storageattach", :id,  "--storagectl", "SCSI", "--port", "1", "--nonrotational" ,"on"]
  end


  config.vm.provision "shell" do |s|
    ssh_pub_key = File.readlines("#{KeysLocation}/id_rsa.pub").first.strip
    box_user_name = config.ssh.username
    s.inline = <<-SHELL
      whoami
      if [ ! -f /home/#{box_user_name}/.ssh/authorized_keys_addedx ]; then
        echo #{ssh_pub_key} >> /home/#{box_user_name}/.ssh/authorized_keys
        touch /home/#{box_user_name}/.ssh/authorized_keys_addedx
      fi
      usermod -a -G docker #{box_user_name}
      ! (docker info | grep WARNING)
    SHELL
  end
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "../common/noop.yml"
  end

end
